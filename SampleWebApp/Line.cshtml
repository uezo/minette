@using Minette;
@using Minette.Application;
@using System.Web.Hosting;

@{
    const string DatabaseName = "<input database defined in Web.config>";
    var logger = new Logger(DatabaseName, "<Log Table>");
    try
    {
        //Get data from LINE
        var bytesData = Request.BinaryRead(Request.ContentLength);
        var encodedString = System.Text.Encoding.UTF8.GetString(bytesData);
        var decodedString = System.Web.HttpUtility.UrlDecode(encodedString, System.Text.Encoding.UTF8);

        //Signiture
        System.Text.UTF8Encoding ue = new System.Text.UTF8Encoding();
        byte[] keyBytes = ue.GetBytes("<input your Channel Secret>");
        System.Security.Cryptography.HMACSHA256 sha256 = new System.Security.Cryptography.HMACSHA256(keyBytes);
        byte[] hashBytes = sha256.ComputeHash(bytesData);
        string hashStr = Convert.ToBase64String(hashBytes);
        if (hashStr == Request.Headers["X-LINE-Signature"])
        {
            //Init Core
            var minette = new Minette.Core();
            //Classifier
            minette.Classifier = new Classifier();
            //SessionManager
            minette.SessionManager = new SessionManager(DatabaseName, "<Session Table>");
            //Logger
            minette.Logger = logger;

            //Init Adaptor
            var adaptor = new Minette.Channel.Line.Adaptor();
            //AccessToken
            adaptor.ChannelAccessToken = "<input your access token>";
            //MinetteCore
            adaptor.MinetteCore = minette;
            //UserManager
            adaptor.UserManager = new UserManager(DatabaseName, "<User Table>", "LINE");
            //Execute
            HostingEnvironment.QueueBackgroundWorkItem(token => adaptor.ProcessRequestAsync(token, decodedString));
        }
        else
        {
            logger.Write("Invalid Signiture : hash=" + hashStr + " / sign=" + Request.Headers["X-LINE-Signature"]);
        }
    }
    catch (Exception ex)
    {
        logger.Write("AdaptorError:" + ex.Message + "\n" + ex.StackTrace);
    }
}
